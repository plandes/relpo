#@meta {author: "Paul Landes"}
#@meta {desc: "Python build configuration", date: "2025-04-15"}


### Project
#
[project]
name = "zensols_relpo"
# must be kept in sync with git tags; is not updated by any automation tools
version = "0.0.3"
authors = [{name = "Paul Landes", email = "landes@mailc.net"}]
description = "A Python project release with Git integration."
readme = "README.md"
requires-python = ">=3.11,<3.13"
dependencies = [
  # git
  "GitPython~=3.1.29",
  "gitdb2~=2.0.3",
  # config
  "PyYAML~=6.0.1",
  # pyproject.toml and API doc templating
  "jinja2>=3.1",
  # TOML parsing
  "tomlkit~=0.13.2",
  # API doc generation
  # 
  # version 8 and higher barfs with intersphix_mapping config
  # with: "Target URIs must be unique"
  "Sphinx~=7.4.7",
  "recommonmark",
  "rst2pdf",
  "furo",
  "sphinx-autodoc-typehints",
  "sphinx-copybutton",
  "btd.sphinx.graphviz",
  "btd.sphinx.inheritance_diagram",
  # deploy
  "twine~=6.1.0",
  # cli
  "plac~=1.4.5",
]
scripts = { relpo = "zensols.relpo.cli:main" }
license = "MIT"
license-files = ["LICENSE.md"]
keywords = ["build", "utility"]

[project.urls]
Homepage = "https://github.com/plandes/relpo"
Documentation = "https://plandes.github.io/relpo"
Repository = "https://github.com/plandes/relpo.git"
Issues = "https://github.com/plandes/relpo/issues"
Changelog = "https://github.com/plandes/relpo/blob/master/CHANGELOG.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


### Hatchling
#
[tool.hatch.build.targets.wheel]
packages = ["src/zensols"]


### Pixi
#
# specifies properties for the whole workspace
[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["osx-arm64", "osx-64", "linux-64", "win-64"]
preview = ["pixi-build"]

# virtual environments (each under '.pixi/envs') for specific tasks
[tool.pixi.environments]
default = { features = ["pyverprev"], solve-group = "default" }
testprev = { features = ["pyverprev", "testprev"] }
testcur = { features = ["pyvercur", "testcur"] }
invoke = { features = ["invoke"], solve-group = "default" }
build-pypi = { features = ["pyverprev", "build-pypi"], solve-group = "default" }

# specify where to download the build backend that builds conda files
[tool.pixi.package.build]
backend = { name = "pixi-build-python", version = "0.1.*" }
channels = [
  "https://prefix.dev/pixi-build-backends",
  "https://prefix.dev/conda-forge",
]

# set the Python requirement for its environment
[tool.pixi.feature.pyverprev.dependencies]
python = "~=3.11.12"
[tool.pixi.feature.pyvercur.dependencies]
python = "~=3.12.10"

# pixi directly supports depending on PyPI packages, the PyPA calls a
# distributed package a 'distribution'
[tool.pixi.feature.testprev.pypi-dependencies]
zensols_relpo = { path = ".", editable = true }
[tool.pixi.feature.testcur.pypi-dependencies]
zensols_relpo = { path = ".", editable = true }
[tool.pixi.feature.invoke.pypi-dependencies]
zensols_relpo = { path = ".", editable = true }

# dependencies needed during build/link time that are specific to the host
# machine
[tool.pixi.package.host-dependencies]
hatchling = "==1.26.3"
python = "==3.11.6"

# dependencies for building the wheel
[tool.pixi.feature.build-pypi.dependencies]
hatchling = "==1.26.3"


## Tasks
#
# task to use hatchling to build the wheel
[tool.pixi.feature.build-pypi.tasks]
build-wheel = "python -m hatchling build -t wheel --dir $PX_DIST_DIR"

# use Python built-in unittest library for tests
[tool.pixi.feature.testprev.tasks.testprev]
args = [{ "arg" = "glob_pat" }]
cmd = "python -m unittest discover -s tests -p '{{glob_pat}}' -v"
[tool.pixi.feature.testcur.tasks.testcur]
args = [{ "arg" = "glob_pat" }]
cmd = "python -m unittest discover -s tests -p '{{glob_pat}}' -v"

# default environment tasks
[tool.pixi.tasks]
# env sanity check
defaultenv = "python -c 'import sys; print(sys.executable, sys.version)'"
# build the conda distribution file
build-conda = "pixi build --output-dir $PX_DIST_DIR"
# export environment.yml
export = "pixi workspace export conda-environment"

# command-line program invocation
[tool.pixi.tasks.invoke]
args = [{ "arg" = "args", "default" = "" }]
env = { CLASS = "zensols.relpo.cli", PYTHONPATH = "src" }
cmd = "\npython -c \"from $CLASS import main;print('_'*80);main('{{args}}'.split())\""
